#pragma kernel cs_main
#include "MarchingConstant.compute"

struct Triangle
{
    float3 a;
    float3 b;
    float3 c;
};

StructuredBuffer<float> levels;
AppendStructuredBuffer<Triangle> triangles;
int size;
float surface;

int to_1dimension(const int x, const int y, const int z)
{
    return x + y * size + z * size * size;
}

float get_offset(const float a, const float b)
{
    // TODO: Use pos in offset
    const float delta = b - a;
    return delta == 0 ? surface : (surface - a) / delta;
}

float get_vertex_component(const int i, const int j, const int c, const float offset)
{
    return vertex_offset[edge_connection[i * 2] * 3 + j] + offset * edge_direction[i * 3 + j] + c;
}

float3 get_vertex(const float cube[8], const int x, const int y, const int z, const int i)
{
    const float offset = get_offset(cube[edge_connection[i * 2]], cube[edge_connection[i * 2 + 1]]);
    float3 vertex;
    vertex.x = get_vertex_component(i, 0, x, offset);
    vertex.y = get_vertex_component(i, 1, y, offset);
    vertex.z = get_vertex_component(i, 2, z, offset);
    return vertex;
}

Triangle get_triangle(const float cube[8], const int x, const int y, const int z, const int tri_index)
{
    Triangle t;
    t.a = get_vertex(cube, x, y, z, triangle_connection_table[tri_index]);
    t.b = get_vertex(cube, x, y, z, triangle_connection_table[tri_index + 1]);
    t.c = get_vertex(cube, x, y, z, triangle_connection_table[tri_index + 2]);
    return t;
}

[numthreads(4, 4, 4)]
void cs_main(const uint3 id : SV_DispatchThreadID)
{
    int flag_index = 0;
    float cube[8];
    for (int i = 0; i < 8; i++)
    {
        const int ix = id.x + vertex_offset[i * 3];
        const int iy = id.y + vertex_offset[i * 3 + 1];
        const int iz = id.z + vertex_offset[i * 3 + 2];
        cube[i] = levels[to_1dimension(ix, iy, iz)];
        if (cube[i] <= surface) flag_index |= 1 << i;
    }

    if (cube_edge_flags[flag_index] == 0) return;

    for (int tri_index = flag_index * 16; triangle_connection_table[tri_index] != -1; tri_index += 3)
    {
        triangles.Append(get_triangle(cube, id.x, id.y, id.z, tri_index));
    }
}
